{"version":3,"sources":["pages/Home/styles.ts","components/Layout/styles.ts","components/Header/styles.ts","components/Header/Header.tsx","components/Footer/styles.ts","components/Footer/Footer.tsx","components/Layout/Layout.tsx","pages/Home/Home.tsx"],"names":["useStyles","makeStyles","root","minHeight","display","flexDirection","alignItems","justifyContent","Header","useTranslation","t","classes","Box","className","Footer","Layout","children","title","HelmetHeader","Container","maxWidth","Home","props","useAppContext","lang","setLang","useThemeContext","mode","toggleMode","Typography","variant","sx","mt","IconButton","onClick","ml","ToggleButtonGroup","size","value","exclusive","onChange","event","aria-label","ToggleButton"],"mappings":"8QAYeA,EAVGC,YAAW,CAC3BC,KAAM,CACJC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,Y,SCFLP,EAJGC,YAAW,CAC3BC,KAAM,K,QCGOF,EAJGC,YAAW,CAC3BC,KAAM,K,OCiBOM,EAPiB,SAAC,GAAQ,eACzBC,YAAe,UAArBC,EAD+B,IAEjCC,EAAUX,IAEhB,OAAO,cAACY,EAAA,EAAD,CAAKC,UAAWF,EAAQT,QCXlBF,EAJGC,YAAW,CAC3BC,KAAM,KCiBOY,EAPiB,SAAC,GAAQ,eACzBL,YAAe,UAArBC,EAD+B,IAEjCC,EAAUX,IAEhB,OAAO,cAACY,EAAA,EAAD,CAAKC,UAAWF,EAAQT,Q,QCgBlBa,EAfiB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrCN,EAAUX,IAEhB,OACE,qCACE,cAACkB,EAAA,EAAD,CAAcD,MAAOA,IACrB,cAAC,EAAD,IACA,cAACE,EAAA,EAAD,CAAWC,UAAU,EAArB,SACE,cAACR,EAAA,EAAD,CAAKC,UAAWF,EAAQT,KAAxB,SAA+Bc,MAEjC,cAAC,EAAD,Q,gBCqCSK,EA1Ca,SAACC,GAAW,IAC9BZ,EAAMD,YAAe,UAArBC,EACFC,EAAUX,IAFqB,EASXuB,cAAlBC,EAT6B,EAS7BA,KAAMC,EATuB,EASvBA,QATuB,EAURC,cAArBC,EAV6B,EAU7BA,KAAMC,EAVuB,EAUvBA,WAUd,OACE,cAAC,EAAD,CAAQX,MAAOP,EAAE,aAAjB,SACE,eAACE,EAAA,EAAD,CAAKC,UAAWF,EAAQT,KAAxB,UACE,cAAC2B,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BpB,EAAE,qBAC5B,eAACE,EAAA,EAAD,CAAKmB,GAAI,CAAEC,GAAI,GAAK5B,QAAQ,OAAOE,WAAW,SAASC,eAAe,SAAtE,UACE,cAAC0B,EAAA,EAAD,CAAYC,QAbM,WACxBN,KAY8CG,GAAI,CAAEI,GAAI,GAAlD,SACY,UAATR,EAAmB,cAAC,IAAD,IAAgB,cAAC,IAAD,MAEtC,eAACS,EAAA,EAAD,CAAmBC,KAAK,QAAQC,MAAOd,EAAMe,WAAS,EAACC,SAZtC,SAACC,EAAsCjB,GAC9DC,EAAQD,IAWiFkB,aAAW,eAA9F,UACE,cAACC,EAAA,EAAD,CAAcL,MAAM,KAAKI,aAAW,cAApC,gBAGA,cAACC,EAAA,EAAD,CAAcL,MAAM,KAAKI,aAAW,cAApC","file":"static/js/4.6fe1c9f6.chunk.js","sourcesContent":["import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n\nexport default useStyles\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Box from '@mui/material/Box'\n\nimport useStyles from './styles'\n\ninterface HeaderProps {}\n\n/**\n * Header\n * @param props HeaderProps\n * @returns\n */\nconst Header: FC<HeaderProps> = ({}) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  return <Box className={classes.root}></Box>\n}\n\nexport default Header\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Box from '@mui/material/Box'\n\nimport useStyles from './styles'\n\ninterface FooterProps {}\n\n/**\n * Footer\n * @param props FooterProps\n * @returns\n */\nconst Footer: FC<FooterProps> = ({}) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  return <Box className={classes.root}></Box>\n}\n\nexport default Footer\n","import { FC } from 'react'\nimport Box from '@mui/material/Box'\nimport Container from '@mui/material/Container'\n\nimport useStyles from './styles'\nimport Header from '@components/Header'\nimport Footer from '@components/Footer'\nimport HelmetHeader from '@components/HelmetHeader'\n\ninterface LayoutProps {\n  title: string\n}\n\n/**\n * Layout\n * @param param LayoutProps\n * @returns\n */\nconst Layout: FC<LayoutProps> = ({ children, title }) => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <HelmetHeader title={title} />\n      <Header />\n      <Container maxWidth={false}>\n        <Box className={classes.root}>{children}</Box>\n      </Container>\n      <Footer />\n    </>\n  )\n}\n\nexport default Layout\n","import { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport DarkIcon from '@mui/icons-material/Brightness7'\nimport LightIcon from '@mui/icons-material/Brightness4'\nimport Box from '@mui/material/Box'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\nimport ToggleButton from '@mui/material/ToggleButton'\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\n\nimport useStyles from './styles'\nimport AppLang from '@interfaces/AppLang'\nimport Layout from '@components/Layout/Layout'\nimport { useAppContext } from '@contexts/AppContext'\nimport { useThemeContext } from '@contexts/ThemeContext'\n\ninterface HomeProps {}\n\n/**\n * Home\n * @param props HomeProps\n * @returns\n */\nconst Home: FC<HomeProps> = (props) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  /**\n   * NOTE :\n   * The content of this page is just to\n   * simulate a theme mode and app lang\n   */\n  const { lang, setLang } = useAppContext()\n  const { mode, toggleMode } = useThemeContext()\n\n  const handleChangeTheme = () => {\n    toggleMode()\n  }\n\n  const handleChangeLang = (event: React.MouseEvent<HTMLElement>, lang: AppLang) => {\n    setLang(lang)\n  }\n\n  return (\n    <Layout title={t('tabs.home')}>\n      <Box className={classes.root}>\n        <Typography variant=\"h4\">{t('pages.home.text')}</Typography>\n        <Box sx={{ mt: 2 }} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <IconButton onClick={handleChangeTheme} sx={{ ml: 2 }}>\n            {mode === 'light' ? <LightIcon /> : <DarkIcon />}\n          </IconButton>\n          <ToggleButtonGroup size=\"small\" value={lang} exclusive onChange={handleChangeLang} aria-label=\"app language\">\n            <ToggleButton value=\"en\" aria-label=\"en language\">\n              EN\n            </ToggleButton>\n            <ToggleButton value=\"fr\" aria-label=\"fr language\">\n              FR\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </Box>\n    </Layout>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}