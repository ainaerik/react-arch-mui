{"version":3,"sources":["pages/Home/styles.ts","components/Layout/styles.ts","components/Header/styles.ts","components/Header/Header.tsx","components/Footer/styles.ts","components/Footer/Footer.tsx","components/Layout/Layout.tsx","components/ToggleLanguage/ToggleLanguage.tsx","utils/Languages.ts","pages/Home/Home.tsx"],"names":["useStyles","makeStyles","root","minHeight","display","flexDirection","alignItems","justifyContent","Header","useTranslation","t","classes","Box","className","Footer","Layout","children","title","HelmetHeader","Container","maxWidth","ToggleLanguage","lang","languages","handleChangeLang","ToggleButtonGroup","size","value","exclusive","onChange","aria-label","map","item","ToggleButton","key","label","LanguageMaps","Home","props","useAppContext","setLang","useThemeContext","mode","toggleMode","useState","Date","dateTime","setDateTime","Typography","variant","IconButton","onClick","sx","mb","event","mt","DateTimePicker","newValue","renderInput","params","TextField"],"mappings":"oSAYeA,EAVGC,YAAW,CAC3BC,KAAM,CACJC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,Y,SCFLP,EAJGC,YAAW,CAC3BC,KAAM,K,QCGOF,EAJGC,YAAW,CAC3BC,KAAM,K,OCiBOM,EAPiB,SAAC,GAAQ,eACzBC,YAAe,UAArBC,EAD+B,IAEjCC,EAAUX,IAEhB,OAAO,cAACY,EAAA,EAAD,CAAKC,UAAWF,EAAQT,QCXlBF,EAJGC,YAAW,CAC3BC,KAAM,KCiBOY,EAPiB,SAAC,GAAQ,eACzBL,YAAe,UAArBC,EAD+B,IAEjCC,EAAUX,IAEhB,OAAO,cAACY,EAAA,EAAD,CAAKC,UAAWF,EAAQT,Q,QCgBlBa,EAfiB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrCN,EAAUX,IAEhB,OACE,qCACE,cAACkB,EAAA,EAAD,CAAcD,MAAOA,IACrB,cAAC,EAAD,IACA,cAACE,EAAA,EAAD,CAAWC,UAAU,EAArB,SACE,cAACR,EAAA,EAAD,CAAKC,UAAWF,EAAQT,KAAxB,SAA+Bc,MAEjC,cAAC,EAAD,Q,kBCESK,EAZiC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,iBAClE,OACE,cAACC,EAAA,EAAD,CAAmBC,KAAK,QAAQC,MAAOL,EAAMM,WAAS,EAACC,SAAUL,EAAkBM,aAAW,eAA9F,SACGP,EAAUQ,KAAI,SAACC,GAAD,OACb,cAACC,EAAA,EAAD,CAA6BN,MAAOK,EAAKE,IAAKJ,aAAA,UAAeE,EAAf,aAA9C,SACGA,EAAKG,OADWH,EAAKE,WCTjBE,EAXkB,CAC/B,CACEF,IAAK,KACLC,MAAO,MAET,CACED,IAAK,KACLC,MAAO,O,gBC+DIE,EA7Ca,SAACC,GAAW,IAC9B5B,EAAMD,YAAe,UAArBC,EACFC,EAAUX,IAFqB,EASXuC,cAAlBjB,EAT6B,EAS7BA,KAAMkB,EATuB,EASvBA,QATuB,EAURC,cAArBC,EAV6B,EAU7BA,KAAMC,EAVuB,EAUvBA,WAVuB,EAWLC,mBAAsB,IAAIC,MAXrB,mBAW9BC,EAX8B,KAWpBC,EAXoB,KAqBrC,OACE,cAAC,EAAD,CAAQ9B,MAAOP,EAAE,aAAjB,SACE,eAACE,EAAA,EAAD,CAAKC,UAAWF,EAAQT,KAAxB,UACE,cAAC8C,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BvC,EAAE,qBAC5B,eAACE,EAAA,EAAD,CAAKR,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAASC,eAAe,SAA9E,UACE,cAAC2C,EAAA,EAAD,CAAYC,QAbM,WACxBR,KAY8CS,GAAI,CAAEC,GAAI,GAAlD,SACY,UAATX,EAAmB,cAAC,IAAD,IAAgB,cAAC,IAAD,MAGtC,cAAC,EAAD,CAAgBpB,KAAMA,EAAMC,UAAWa,EAAcZ,iBAbpC,SAAC8B,EAAsChC,GAC9DkB,EAAQlB,MAcF,cAACV,EAAA,EAAD,CAAKwC,GAAI,CAAEG,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACE7B,MAAOmB,EACPjB,SAAU,SAAC4B,GAAD,OAAcV,EAAYU,IACpCC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,eAAeD","file":"static/js/4.8733688d.chunk.js","sourcesContent":["import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n\nexport default useStyles\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Box from '@mui/material/Box'\n\nimport useStyles from './styles'\n\ninterface HeaderProps {}\n\n/**\n * Header\n * @param props HeaderProps\n * @returns\n */\nconst Header: FC<HeaderProps> = ({}) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  return <Box className={classes.root}></Box>\n}\n\nexport default Header\n","import { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {},\n})\n\nexport default useStyles\n","import { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Box from '@mui/material/Box'\n\nimport useStyles from './styles'\n\ninterface FooterProps {}\n\n/**\n * Footer\n * @param props FooterProps\n * @returns\n */\nconst Footer: FC<FooterProps> = ({}) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  return <Box className={classes.root}></Box>\n}\n\nexport default Footer\n","import { FC } from 'react'\nimport Box from '@mui/material/Box'\nimport Container from '@mui/material/Container'\n\nimport useStyles from './styles'\nimport Header from '@components/Header'\nimport Footer from '@components/Footer'\nimport HelmetHeader from '@components/HelmetHeader'\n\ninterface LayoutProps {\n  title: string\n}\n\n/**\n * Layout\n * @param param LayoutProps\n * @returns\n */\nconst Layout: FC<LayoutProps> = ({ children, title }) => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <HelmetHeader title={title} />\n      <Header />\n      <Container maxWidth={false}>\n        <Box className={classes.root}>{children}</Box>\n      </Container>\n      <Footer />\n    </>\n  )\n}\n\nexport default Layout\n","import { FC } from 'react'\nimport ToggleButton from '@mui/material/ToggleButton'\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\n\nimport { AppLang, Language } from '@interfaces/AppLang'\n\ninterface ToggleLanguageProps {\n  lang: AppLang\n  languages: Language[]\n  handleChangeLang?: (event: React.MouseEvent<HTMLElement>, lang: AppLang) => void\n}\n\n/**\n * ToggleLanguage\n *\n * @param param ToggleLanguageProps\n * @returns\n */\nconst ToggleLanguage: FC<ToggleLanguageProps> = ({ lang, languages, handleChangeLang }) => {\n  return (\n    <ToggleButtonGroup size=\"small\" value={lang} exclusive onChange={handleChangeLang} aria-label=\"app language\">\n      {languages.map((item: Language) => (\n        <ToggleButton key={item.key} value={item.key} aria-label={`${item} language`}>\n          {item.label}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  )\n}\n\nexport default ToggleLanguage\n","import { Language } from '@interfaces/AppLang'\n\nconst LanguageMaps: Language[] = [\n  {\n    key: 'en',\n    label: 'EN',\n  },\n  {\n    key: 'fr',\n    label: 'FR',\n  },\n]\n\nexport default LanguageMaps\n","import { FC, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Box from '@mui/material/Box'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\nimport TextField from '@mui/material/TextField'\nimport TimePicker from '@mui/lab/TimePicker'\nimport DatePicker from '@mui/lab/DatePicker'\nimport DateTimePicker from '@mui/lab/DateTimePicker'\nimport DarkIcon from '@mui/icons-material/Brightness7'\nimport LightIcon from '@mui/icons-material/Brightness4'\n\nimport useStyles from './styles'\nimport Layout from '@components/Layout/Layout'\nimport ToggleLanguage from '@components/ToggleLanguage'\nimport LanguageMaps from '@utils/Languages'\nimport { useAppContext } from '@contexts/AppContext'\nimport { useThemeContext } from '@contexts/ThemeContext'\nimport { AppLang } from '@interfaces/AppLang'\n\ninterface HomeProps {}\n\n/**\n * Home\n * @param props HomeProps\n * @returns\n */\nconst Home: FC<HomeProps> = (props) => {\n  const { t } = useTranslation('common')\n  const classes = useStyles()\n\n  /**\n   * NOTE :\n   * The content of this page is just to\n   * simulate a theme mode and app lang\n   */\n  const { lang, setLang } = useAppContext()\n  const { mode, toggleMode } = useThemeContext()\n  const [dateTime, setDateTime] = useState<Date | null>(new Date())\n\n  const handleChangeTheme = () => {\n    toggleMode()\n  }\n\n  const handleChangeLang = (event: React.MouseEvent<HTMLElement>, lang: AppLang) => {\n    setLang(lang)\n  }\n\n  return (\n    <Layout title={t('tabs.home')}>\n      <Box className={classes.root}>\n        <Typography variant=\"h4\">{t('pages.home.text')}</Typography>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n          <IconButton onClick={handleChangeTheme} sx={{ mb: 2 }}>\n            {mode === 'light' ? <LightIcon /> : <DarkIcon />}\n          </IconButton>\n\n          <ToggleLanguage lang={lang} languages={LanguageMaps} handleChangeLang={handleChangeLang} />\n\n          <Box sx={{ mt: 2 }}>\n            <DateTimePicker\n              value={dateTime}\n              onChange={(newValue) => setDateTime(newValue)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Layout>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}